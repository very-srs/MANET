<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configuration Server</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .placeholder-gray::placeholder {
            color: #9ca3af;
        }
        @import url('https://rsms.me/inter/inter.css');
    </style>
</head>
<body class="bg-gray-900 text-gray-200 flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-4xl bg-gray-800 rounded-lg shadow-xl p-6 md:p-8 space-y-6">

        <!-- Header -->
        <div class="text-center">
            <h1 class="text-3xl font-bold text-white">Configuration Interface</h1>
        </div>

        <!-- Top Section: Side-by-Side Layout -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Left Column: Manage Configurations -->
            <div class="bg-gray-700/50 rounded-lg p-4">
                <h2 class="text-xl font-semibold mb-3 text-cyan-400">Manage Configurations</h2>
                <div id="config-list" class="space-y-3 max-h-48 overflow-y-auto pr-2">
                    <!-- Config list will be populated here -->
                    <p class="text-gray-400">No saved configurations found.</p>
                </div>
            </div>
            <!-- Right Column: Active Profile -->
            <div class="bg-gray-700/50 rounded-lg p-4 flex flex-col justify-center">
                 <h2 class="text-xl font-semibold mb-3 text-cyan-400">Active Profile</h2>
                <div id="active-profile-container" class="space-y-2">
                    <!-- Active profile status will be injected here -->
                </div>
            </div>
        </div>


        <!-- Spacer -->
        <hr class="border-gray-600">

        <!-- Main Configuration Form -->
        <div>
            <h2 class="text-xl font-semibold mb-4 text-cyan-400">Device Settings</h2>
            <form id="config-form" class="space-y-4">
                
                <!-- SAE Key -->
                <div>
                    <label for="sae_key" class="block text-sm font-medium text-gray-300">SAE Key (12-32 characters)</label>
                    <div class="mt-1 flex rounded-md shadow-sm">
                        <input type="text" name="sae_key" id="sae_key" class="flex-1 block w-full rounded-none rounded-l-md bg-gray-900 border-gray-600 focus:ring-cyan-500 focus:border-cyan-500 placeholder-gray sm:text-sm" placeholder="Enter SAE Key">
                        <button type="button" id="generate-key" class="inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-600 bg-gray-700 text-gray-300 text-sm hover:bg-gray-600 focus:outline-none focus:ring-1 focus:ring-cyan-500 focus:border-cyan-500">
                            Generate
                        </button>
                    </div>
                </div>

                <!-- Network Settings: BAT0 IP and Mesh SSID -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="bat0_ip" class="block text-sm font-medium text-gray-300">bat0 Interface IP</label>
                        <input type="text" name="bat0_ip" id="bat0_ip" class="mt-1 block w-full rounded-md bg-gray-900 border-gray-600 focus:ring-cyan-500 focus:border-cyan-500 placeholder-gray sm:text-sm" placeholder="e.g., 10.10.10.1">
                    </div>
                    <div>
                        <label for="mesh_ssid" class="block text-sm font-medium text-gray-300">Mesh SSID</label>
                        <input type="text" name="mesh_ssid" id="mesh_ssid" class="mt-1 block w-full rounded-md bg-gray-900 border-gray-600 focus:ring-cyan-500 focus:border-cyan-500 placeholder-gray sm:text-sm" placeholder="e.g., my-mesh-network">
                    </div>
                </div>

                <!-- Passwords -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <!-- THE FIX: Changed name and id from new_root_password to root_password -->
                        <label for="root_password" class="block text-sm font-medium text-gray-300">New Root Password</label>
                        <input type="password" name="root_password" id="root_password" class="mt-1 block w-full rounded-md bg-gray-900 border-gray-600 focus:ring-cyan-500 focus:border-cyan-500 placeholder-gray sm:text-sm" placeholder="Enter new root password">
                    </div>
                    <div>
                        <!-- THE FIX: Changed name and id from new_user_password to user_password -->
                        <label for="user_password" class="block text-sm font-medium text-gray-300">New User Password (user: radio)</label>
                        <input type="password" name="user_password" id="user_password" class="mt-1 block w-full rounded-md bg-gray-900 border-gray-600 focus:ring-cyan-500 focus:border-cyan-500 placeholder-gray sm:text-sm" placeholder="Enter new user password">
                    </div>
                </div>

                <!-- Hardware Selection -->
                <div>
                    <label for="hardware_selection" class="block text-sm font-medium text-gray-300">Hardware Selection</label>
                    <select id="hardware_selection" name="hardware_selection" class="mt-1 block w-full pl-3 pr-10 py-2 text-base bg-gray-900 border-gray-600 focus:outline-none focus:ring-cyan-500 focus:border-cyan-500 sm:text-sm rounded-md">
                        <option>cm4+waveshare+MT7916-3x3</option>
                        <option>cm4+waveshare+MT7916-4x4</option>
                        <option>rpi5+MT7916-3x3</option>
                        <option>r6c+MT7916-3x3</option>
                        <option>r6c+MT7916-4x4</option>
                    </select>
                </div>

                <!-- Notes -->
                <div>
                    <label for="notes" class="block text-sm font-medium text-gray-300">Notes</label>
                    <textarea id="notes" name="notes" rows="3" class="mt-1 block w-full rounded-md bg-gray-900 border-gray-600 focus:ring-cyan-500 focus:border-cyan-500 placeholder-gray sm:text-sm" placeholder="Max 250 characters"></textarea>
                </div>
                
                <!-- Spacer -->
                <hr class="border-gray-600">
                
                <!-- Actions -->
                <div class="flex flex-col md:flex-row items-center gap-4">
                     <div class="flex-grow w-full">
                        <label for="config_name" class="block text-sm font-medium text-gray-300">Configuration Name</label>
                        <input type="text" name="config_name" id="config_name" class="mt-1 block w-full rounded-md bg-gray-900 border-gray-600 focus:ring-cyan-500 focus:border-cyan-500 placeholder-gray sm:text-sm" placeholder="Name to save/publish as">
                    </div>
                    <div class="flex items-end gap-2 w-full md:w-auto pt-1 md:pt-6">
                        <button type="button" id="save-button" class="w-full md:w-auto inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 focus:ring-offset-gray-800">Save</button>
                        <button type="button" id="publish-button" class="w-full md:w-auto inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 focus:ring-offset-gray-800">Publish</button>
                    </div>
                </div>

            </form>
        </div>
    </div>

    <!-- Notification Area -->
    <div id="notification" class="fixed top-5 right-5 z-50"></div>

    <!-- Confirmation Modal -->
    <div id="confirm-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center">
        <div class="bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-sm">
            <h3 class="text-lg font-bold text-white mb-4" id="modal-title">Confirm Action</h3>
            <p class="text-gray-300 mb-6" id="modal-body">Are you sure?</p>
            <div class="flex justify-end gap-4">
                <button id="modal-cancel-btn" class="py-2 px-4 rounded-md text-sm font-medium bg-gray-600 hover:bg-gray-500 text-white focus:outline-none">Cancel</button>
                <button id="modal-confirm-btn" class="py-2 px-4 rounded-md text-sm font-medium bg-red-600 hover:bg-red-700 text-white focus:outline-none">Confirm</button>
            </div>
        </div>
    </div>

<script>
    // --- DOM Elements ---
    const form = document.getElementById('config-form');
    const generateKeyBtn = document.getElementById('generate-key');
    const saveBtn = document.getElementById('save-button');
    const publishBtn = document.getElementById('publish-button');
    const configListDiv = document.getElementById('config-list');
    const activeProfileContainer = document.getElementById('active-profile-container');
    const notificationDiv = document.getElementById('notification');
    const confirmModal = document.getElementById('confirm-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalBody = document.getElementById('modal-body');
    const modalCancelBtn = document.getElementById('modal-cancel-btn');
    const modalConfirmBtn = document.getElementById('modal-confirm-btn');

    // --- State ---
    let confirmAction = null;
    
    // --- Helper Functions ---
    const showNotification = (message, isError = false) => {
        const bgColor = isError ? 'bg-red-500' : 'bg-green-500';
        const notification = document.createElement('div');
        notification.className = `${bgColor} text-white py-2 px-4 rounded-lg shadow-lg animate-pulse`;
        notification.textContent = message;
        notificationDiv.appendChild(notification);
        setTimeout(() => {
            notification.remove();
        }, 3000);
    };

    const getFormData = () => {
        const formData = new FormData(form);
        return new URLSearchParams(formData).toString();
    };
    
    const showConfirmModal = (title, body, onConfirm) => {
        modalTitle.textContent = title;
        modalBody.textContent = body;
        confirmAction = onConfirm;
        confirmModal.classList.remove('hidden');
    };

    const hideConfirmModal = () => {
        confirmModal.classList.add('hidden');
        confirmAction = null;
    };

    // --- Key Generation ---
    generateKeyBtn.addEventListener('click', async () => {
        const array = new Uint8Array(21); // 21 bytes = 28 base64 chars
        window.crypto.getRandomValues(array);
        const base64Key = btoa(String.fromCharCode.apply(null, array));
        document.getElementById('sae_key').value = base64Key;
    });

    // --- Core API Functions ---
    const loadConfig = async (filename) => {
        try {
            const response = await fetch(`/data/${filename}?t=${new Date().getTime()}`);
            if (!response.ok) throw new Error('Network response was not ok');
            const text = await response.text();
            
            form.reset();
            document.getElementById('config_name').value = filename.replace('.conf', '');

            text.split('\n').forEach(line => {
                const eqIndex = line.indexOf('=');
                if (eqIndex > -1) {
                    const key = line.substring(0, eqIndex).trim();
                    const encodedValue = line.substring(eqIndex + 1);
                    const value = decodeURIComponent(encodedValue || '');
                    
                    const element = document.getElementById(key);

                    if (element && element.type !== 'password') {
                        element.value = value;
                    }
                }
            });
            showNotification(`'${filename}' loaded successfully.`);
        } catch (error) {
            console.error('Error loading config:', error);
            showNotification('Error loading configuration.', true);
        }
    };

    const saveConfig = async () => {
        const formData = getFormData();
        try {
            const response = await fetch('/cgi-bin/save_config.cgi', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: formData
            });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const result = await response.json();
            if (result.status === 'success') {
                showNotification(result.message);
                fetchConfigs();
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('Save error:', error);
            showNotification(`Error: ${error.message}`, true);
        }
    };
    
    const publishConfig = async () => {
        const formData = getFormData();
        try {
            const response = await fetch('/cgi-bin/publish_config.cgi', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: formData
            });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const result = await response.json();
            if (result.status === 'success') {
                showNotification(result.message);
                fetchConfigs();
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('Publish error:', error);
            showNotification(`Error: ${error.message}`, true);
        }
    };

    const deleteConfig = async (filename) => {
        const cacheBuster = `t=${new Date().getTime()}`;
        try {
            const response = await fetch(`/cgi-bin/delete_config.cgi?file=${encodeURIComponent(filename)}&${cacheBuster}`);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const result = await response.json();
            if (result.status === 'success') {
                showNotification(result.message);
                fetchConfigs();
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('Delete error:', error);
            showNotification(`Error deleting '${filename}'.`, true);
        }
    };
    
    const clearStats = async (filename) => {
        const cacheBuster = `t=${new Date().getTime()}`;
        try {
            const response = await fetch(`/cgi-bin/clear_stats.cgi?file=${encodeURIComponent(filename)}&${cacheBuster}`);
             if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const result = await response.json();
            if (result.status === 'success') {
                showNotification(result.message);
                fetchConfigs();
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('Clear stats error:', error);
            showNotification(`Error clearing stats for '${filename}'.`, true);
        }
    };

    // --- UI Rendering ---
    const renderConfigs = (data) => {
        // Active Profile
        const activeName = data.active_name || "None";
        const liveCount = data.live_stats?.count ?? 0;
        activeProfileContainer.innerHTML = `
            <div>
                <p class="font-semibold text-white text-lg">${activeName.replace('.conf', '')}</p>
                <p class="text-sm text-cyan-400">Current Installs: <span class="font-bold">${liveCount}</span></p>
            </div>
        `;

        // Config List
        configListDiv.innerHTML = '';
        if (data.configs && data.configs.length > 0) {
            data.configs.forEach(config => {
                const configEntry = document.createElement('div');
                configEntry.className = 'bg-gray-800 p-3 rounded-md flex items-center justify-between';
                const shortName = config.name.replace('.conf', '');
                configEntry.innerHTML = `
                    <div>
                        <p class="font-medium text-white">${shortName}</p>
                        <p class="text-xs text-gray-400">Total Installs: ${config.stats || 0}</p>
                    </div>
                    <div class="flex items-center gap-2">
                        <button class="load-btn text-sm bg-blue-600 hover:bg-blue-700 text-white py-1 px-3 rounded-md" data-filename="${config.name}">Load</button>
                        <button class="clear-btn text-sm bg-yellow-600 hover:bg-yellow-700 text-white py-1 px-3 rounded-md" data-filename="${config.name}">Clear Stats</button>
                        <button class="delete-btn text-sm bg-red-600 hover:bg-red-700 text-white py-1 px-3 rounded-md" data-filename="${config.name}">Delete</button>
                    </div>
                `;
                configListDiv.appendChild(configEntry);
            });
        } else {
            configListDiv.innerHTML = '<p class="text-gray-400">No saved configurations found.</p>';
        }
    };

    // --- Event Listeners and Initial Load ---
    configListDiv.addEventListener('click', (e) => {
        const filename = e.target.dataset.filename;
        if (!filename) return;

        if (e.target.classList.contains('load-btn')) {
            loadConfig(filename);
        } else if (e.target.classList.contains('delete-btn')) {
            showConfirmModal('Delete Configuration', `Are you sure you want to delete '${filename}'?`, () => deleteConfig(filename));
        } else if (e.target.classList.contains('clear-btn')) {
            showConfirmModal('Clear Statistics', `Are you sure you want to clear the stats for '${filename}'?`, () => clearStats(filename));
        }
    });
    
    saveBtn.addEventListener('click', saveConfig);
    publishBtn.addEventListener('click', publishConfig);
    modalCancelBtn.addEventListener('click', hideConfirmModal);
    modalConfirmBtn.addEventListener('click', () => {
        if (typeof confirmAction === 'function') {
            confirmAction();
        }
        hideConfirmModal();
    });

    const fetchConfigs = async () => {
        try {
            const response = await fetch(`/cgi-bin/list_configs.cgi?t=${new Date().getTime()}`);
            if (!response.ok) throw new Error('Network response was not ok');
            const data = await response.json();
            renderConfigs(data);
        } catch (error) {
            console.error('Error fetching configs:', error);
            configListDiv.innerHTML = '<p class="text-red-400">Error loading configuration list.</p>';
        }
    };

    // Initial load and periodic refresh
    fetchConfigs();
    setInterval(fetchConfigs, 5000);
</script>
</body>
</html>

