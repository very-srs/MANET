# MANET Node Assembly and Provisioning Guide

*October 2025, First release - basic networking functional*

## Overview

This document describes the process for assembling and flashing a Raspberry Pi
Compute Module 4 (CM4) into a portable Mobile Ad-Hoc Network (MANET) node.
The resulting device is designed to be a self-configuring member of a
resilient mesh network.

The OS image is based on Armbian Trixie (Debian 13) and includes all necessary
drivers and kernel modules (**mt7915e**, **BATMAN-ADV**) to function out-of-the-box.
Initial setup and future configuration changes are streamlined via an
automated process using an associated Docker container as a configuration
server.


## Hardware Bill of Materials

* **Compute Module**: Raspberry Pi Compute Module 4
    * 4GB or 8GB of RAM (8gb recommended)
    * Any amount of eMMC storage (8GB, 16GB, or 32GB, but 32 is recommended)

* **Carrier Board**: Waveshare IO Carrier Board Mini A
    * https://www.amazon.com/dp/B095CSRWXS

* **Wi-Fi Module**: Wi-Fi 6E AX3000 M.2 AE Key Module (AW7916-AED)
    * https://asiarf.com/product/wi-fi-6e-m-2-ae-key-module-mt7916-aw7916-aed/

* **M.2 Adapter**: M-Key to A-E Key Adapter
    * https://www.amazon.com/dp/B0BGCWQY67

* **Adhesive**: Thermal Glue
    * https://www.amazon.com/dp/B07HCDRL7W


## Hardware Assembly

The assembly process is straightforward, but care should be taken to ensure a
secure fit.

1.  Insert the Wi-Fi module into the M.2 adapter board.
2.  Insert the adapter board (with Wi-Fi module) into the PCIe M.2 M-Key
    slot on the CM4 carrier board.
3.  Apply a small amount of thermal glue to secure the module to the
    adapter and the adapter to the carrier board. A stable location for
    adhesion is the top of the unused microSD card slot.

**Note**: This adhesive method is sufficient for initial testing. A custom
case and heatsink are recommended for a more robust and permanent assembly.


## Flashing the OS Image

This process uses `rpiboot` to mount the CM4's eMMC storage as a USB drive on a
host computer, allowing it to be flashed with `rpi-imager`.

1.  Connect the CM4 carrier board to your computer with both a USB-C cable
    (for data/power) and an Ethernet cable.

2.  Set the boot switch on the carrier board to USB Mode (switch positioned
    towards the edge of the board).

3.  On your host computer, install the required tools:

    sudo apt update
    sudo apt install -y rpiboot rpi-imager

4.  Run `rpiboot` to mount the eMMC storage:

5.  Launch the Raspberry Pi Imager application:

6.  In the RPi Imager window, configure the flashing process:
    CHOOSE DEVICE: Raspberry Pi 4
    CHOOSE OS: Use custom -> Select the downloaded OS image
        (e.g., `rpi4-openMANET-armbian-13-2.img`)
    CHOOSE STORAGE: Select the mounted Compute Module storage.

7.  Flash the image. Skip any custom settings. After flashing
    completes, disconnect power, set the boot switch back to **Normal Mode**
    (switch towards the center), and reconnect power.



## Initial Configuration

### First Boot Defaults

If the device is booted with an internet connection over Ethernet, a first-boot
script will apply the following default configuration:

* Root password set to `root`.
* New user `radio` created with password `radio`.
* Firmware for the Wi-Fi card is installed.
* The `end0` ethernet interface is configured for DHCP.

### Automated Setup via Configuration Server

Manually editing configuration files on each node is frustrating. The
recommended method is to use the provided Docker-based configuration server on a
host laptop. This server provides DHCP, acts as an internet gateway for the
node, and hosts a web UI for setting mesh parameters.

1.  On the host laptop, navigate to the `host_server` directory and run:
    docker compose up -d --build

2.  From a web browser on the host laptop, navigate to:
    http://10.30.1.1:8081

3.  Use the web UI to set your desired network parameters, such as the mesh
    SSID, WPA3-SAE key, and IPv4 range. These values must be consistent across all
    nodes in your network for the mesh to function.

5.  Save and publish the configuration. On its first boot, the CM4 node will
    pull this configuration and apply it. To apply a new configuration without
    reflashing or rebooting, SSH into the node and manually run
    the `/root/radio-setup.sh` script while connected to the laptop with the
    docker image running.  Any changes made to the published config are re-applied
    at each run of radio-setup.sh.

